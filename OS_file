Ques 3. Write a multithreaded program in C that outputs prime numbers. This program should work as follows. 
The user will run the program and will enter a number on the command line. The program will then create a separate
thread that outputs all the prime numbers less than or equal to the number entered by the user.
Program:
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
int n;
void *print_prime();
void main()
{
pthread_t t1;
int m;
printf("enter the value");
scanf("%d",&n);
m=pthread_create(&t1,NULL,print_prime,NULL);
pthread_join(t1,NULL);
exit(0);
}
void *print_prime() {
 int a=0, b=n,i,j,flag;
  for (i = a; i<= b; i++) {
if (i == 1 || i == 0)
     continue;
     flag = 1;
        for (j = 2; j <= i / 2; ++j) {
 if (i % j == 0) {
 flag = 0;
               break;
            }
 }
        if (flag == 1)
printf("%d\t",i);
    }
    return (0);
}


Ques 24. Consider following and Generate a solution in C to find whether the system is in safe state or not? 
Program:
int main()
{ 
   int a, b, i, j, k;
    a = 5;
    b = 4;
    int alloc[5][4] = { { 0,0,1,2 },{ 1,0,0,0 },{ 1,3,5,4 },{ 0,6,3,2 },{ 0,0,1,4 } };
    int max[5][4] = { { 0, 0, 1,2 }, {1,7,5,0 },{ 2,3,5,6},{ 0,6,5,2},{ 0,6,5,6 } };
    int avail[4] = { 1,5,2,0 };
    int f[a], ans[a], ind = 0;
    for (k = 0; k < a; k++) {
        f[k] = 0;
    }
    int need[a][b];
    for (i = 0; i< a; i++) {
        for (j = 0; j < b; j++)
            need[i][j] = max[i][j] - alloc[i][j];
    }
    int y = 0;
    for (k = 0; k < 5; k++) {
        for (i = 0; i< a; i++) {
            if (f[i] == 0) {
                int flag = 0;
                for (j = 0; j < b; j++) {
                    if (need[i][j] > avail[j]){
                        flag = 1;
                         break;
                    }
                }
                if (flag == 0) {
                     ans[ind++] = i;
                    for (y = 0; y < b; y++)
                        avail[y] += alloc[i][y];
                    f[i] = 1;
                }
            }
        }
    }
printf("Following is the SAFE STATE\n");
    for (i = 0; i< a - 1; i++)
printf(" P%d ->", ans[i]);
printf(" P%d->", ans[a - 1]);
    return (0);
}

